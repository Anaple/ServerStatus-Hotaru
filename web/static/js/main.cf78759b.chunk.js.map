{"version":3,"sources":["components/Card.jsx","components/Header.jsx","components/table.jsx","components/Body.jsx","reportWebVitals.js","index.jsx"],"names":["Meta","Card","ServerCard","Statistic","Countdown","props","style","width","avatar","src","title","description","disabled","percent","cpu","ram","rom","value","network_all","suffix","up","valueStyle","color","prefix","ArrowUpOutlined","down","ArrowDownOutlined","date","Header","theme","mode","defaultSelectedKeys","Item","columns","dataIndex","key","render","status","table","scroll","x","dataSource","data","Footer","Layout","Content","Sider","React","Component","prototype","$axios","axios","Body","state","server","this","createtable","justify","gutter","xs","sm","md","lg","createcard","intervalId","setInterval","getjson","get","then","res","setState","servers","c","map","item","Math","round","network_in","network_out","name","online4","address","location","uptime","load","network","network_rx","network_tx","memory_used","memory_total","hdd_used","hdd_total","region","online6","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.cf78759b.chunk.js","sourcesContent":["import {Card ,Avatar,Progress ,Col, Statistic} from 'antd';\nimport { ArrowUpOutlined, ArrowDownOutlined } from '@ant-design/icons';\nconst {Meta} = Card;\nconst {Countdown} = Statistic;\nconst ServerCard = (props) => {\n\n    return (\n        <Col>\n        <Card\n        style={{ width: 300 }}\n       \n        \n        \n      >\n        <Meta\n          avatar={<Avatar src= {props.avatar} />}\n          title={props.title}\n          description={props.description}\n        />\n         CPU：\n         <Progress disabled={props.disabled} percent={props.cpu} />\n         RAM：\n         <Progress disabled={props.disabled} percent={props.ram} />\n         ROM：\n         <Progress disabled={props.disabled} percent={props.rom} />\n         <Statistic disabled={props.disabled} title=\"已使用流量\" value={props.network_all} suffix=\"MB\" />\n         <Statistic\n            disabled={props.disabled}\n            title=\"上传\"\n            value={props.up}\n        \n            valueStyle={{ color: '#3f8600' }}\n            prefix={<ArrowUpOutlined />}\n            suffix=\"KB\"\n          />\n          <Statistic disabled={props.disabled}\n            title=\"下载\"\n            value={props.down}\n            valueStyle={{ color: '#cf1322' }}\n            prefix={<ArrowDownOutlined />}\n            suffix=\"KB\"\n          />\n        <Statistic disabled={props.disabled}\n        title=\"运行时间\"\n        value={props.date}>\n            \n        </Statistic>\n\n      </Card>\n      </Col>\n      \n  \n  \n    );\n  \n  }\n\nexport default ServerCard;","import { Menu } from 'antd';\nimport { MailOutlined, AppstoreOutlined, SettingOutlined } from '@ant-design/icons';\n\nconst Header =()=>{\n    return(\n    <Menu theme=\"light\" mode=\"horizontal\" defaultSelectedKeys={['logo']}>\n        <Menu.Item key=\"logo\">Server Status</Menu.Item>\n    </Menu>\n    )\n\n}\nexport default Header","import { Table, Tag, Space } from 'antd';\nconst columns = [\n    {\n      title: '运行状态',\n      dataIndex: 'status',\n      key: 'status',\n      render: status => {if(status===false){\n          return <Tag color='red'>维护中</Tag>\n          \n      }else{\n          return <Tag color='geekblue'>正在运行</Tag>\n      }\n    },\n      \n     \n    },\n    {\n      title: '节点名称',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: '服务器位置',\n      dataIndex: 'address',\n      key: 'address',\n    },\n    {\n      title:'在线时间',\n      dataIndex:'uptime',\n      key:'uptime',\n    },\n    {\n      title:'负载',\n      dataIndex:'load',\n      key:'load',\n        \n    },\n    { title:'网络 B/s',\n      dataIndex:'network',\n      key:'network',\n    },\n    {\n      title:'已使用流量',\n      dataIndex:'network_in',\n      key:'network_in',\n    },\n    /*{\n      title: 'Tags',\n      key: 'tags',\n      dataIndex: 'tags',\n      render: tags => (\n        <>\n          {tags.map(tag => {\n            let color = tag.length > 5 ? 'geekblue' : 'green';\n            if (tag === 'loser') {\n              color = 'volcano';\n            }\n            return (\n              <Tag color={color} key={tag}>\n                {tag.toUpperCase()}\n              </Tag>\n            );\n          })}\n        </>\n      ),\n    },*/\n    \n    ];\nconst table =(props)=>{\n    return <Table columns={columns} scroll={{ x: 'max-content' }}dataSource={props.data}></Table>\n}\nexport default table;\n    ","import ServerCard from './Card';\nimport React from 'react'\nimport axios from 'axios';\nimport {Layout,Row} from 'antd';\nimport NavHeader from'./Header';\nimport Table from  './table';\nimport './body.css';\nconst { Header ,Footer, Sider, Content } = Layout;\nReact.Component.prototype.$axios=axios\nclass Body extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            server:[],\n        }\n    }\n    render(){\n        return(\n            <Layout>\n            \n            <NavHeader/>\n           \n            <Layout>\n            \n          \n            \n           \n            <Content>\n            {this.createtable()}\n            <Row justify=\"center\" gutter={[16, { xs: 8, sm: 16, md: 24, lg: 32 }]}>\n            {this.createcard()}\n            </Row>\n            </Content>\n            \n            </Layout>\n            <Footer>2021 React</Footer>\n            </Layout>\n        )\n    }\n    componentDidMount() {\n        this.intervalId = setInterval(() => {\n            this.getjson();\n            \n        }, 2000);\n\n    }\n\n    getjson(){\n        axios.get('json/stats.json').then((res)=>{\n            this.setState({\n                server:res.data.servers,\n            })\n            \n        })\n        \n    }\n    createtable(){\n        var data =[];\n        var c =0\n        this.state.server.map(item =>{\n            const network_all = Math.round(((item.network_in+item.network_out)/1024/1024))+\" MB \";\n            data=[...data, {key: c++,name:item.name,status:item.online4,address:item.location,uptime:item.uptime,load:item.load,network:item.network_rx+\"|\"+item.network_tx,network_in:network_all}]   \n        })\n        return <Table data={data}></Table>\n        \n    }\n    createcard(){\n        return this.state.server.map(item =>{\n            const ram =Math.round((item.memory_used / item.memory_total * 100));\n            const rom =Math.round((item.hdd_used / item.hdd_total * 100));\n            const up = Math.round((item.network_rx /1024));\n            const down = Math.round((item.network_tx /1024));\n            const network_all = Math.round(((item.network_in+item.network_out)/1024/1024));\n            const avatar = \"/clients/\"+item.region+\".png\"\n            if(item.online4&&item.online6 === false){\n                //在线机器\n                return(\n                <ServerCard avatar={avatar}title={item.name} cpu={item.cpu} ram={ram} rom={rom} description={item.type} up={up} down={down} network_all={network_all} date={item.uptime}/>\n                )\n            }\n            else{\n                //掉线机器\n            /*return(\n                <ServerCard avatar={avatar} title={item.name} cpu={item.cpu} ram={ram} rom={rom} description={item.type} disabled={true} up={up} down={down} network_all={network_all} date={item.uptime}/>\n            )*/\n            }\n            \n        }\n        )\n    }\n  \n}\nexport default Body;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/Body';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}